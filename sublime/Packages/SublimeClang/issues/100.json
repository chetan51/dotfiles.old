[
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/7244276",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/100#issuecomment-7244276",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/100",
    "id": 7244276,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-07-25T09:11:19Z",
    "updated_at": "2012-07-25T09:11:19Z",
    "body": "That's the only information available from clang.\n\n```python\nfrom clang import cindex\n\ncode = \"\"\"#include <iostream>\nstd:: \"\"\"\n\nindex = cindex.Index.create()\n\ntu = index.parse(None, \"-I/usr/lib/clang/3.1/include/ -x c++ test.cpp\".split(\" \"), [(\"test.cpp\", code)], 13)\ncomp = tu.codeComplete(\"test.cpp\", 2, 6, [(\"test.cpp\", code)])\n\ncomp.sort()\nfor cr in comp.results:\n    cr = repr(cr)\n    if \"endl\" in cr:\n        print cr\n```\n\noutput:\n\n```\n{'basic_ostream<_CharT, _Traits> &', ResultType} | {'endl', TypedText} | {'(', LeftParen} | {'basic_ostream<_CharT, _Traits> &__os', Placeholder} | {')', RightParen} || Priority: 50 || Availability: Available\n```\n\nMy only suggestion is creating a snippet like for example this:\n```xml\n<snippet>\n    <content><![CDATA[std::endl]]></content>\n    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->\n    <tabTrigger>endl</tabTrigger>\n    <!-- Optional: Set a scope to limit where the snippet will trigger -->\n    <scope>source.c++</scope>\n</snippet>\n```"
  }
]
