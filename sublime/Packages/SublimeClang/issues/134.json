[
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8796491",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8796491",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8796491,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T08:40:43Z",
    "updated_at": "2012-09-23T08:40:43Z",
    "body": "SublimeClang does minimal parsing itself only when doing a completion operation and for that it doesn't spit out any errors/warnings so what you are seeing is coming from libclang, thus I'm going to close the issue, but feel free to continue discussing here.\n\nI can't reproduce this locally, so it sounds like some kind of a configuration issue.\n\nI tried both including cstring directly and cut'n'pasting your version and including it as cstring2, both methods working fine when creating a dummy function calling strlen. Do you get any other errors indicating that some header include path isn't setup properly?\n\nAs a reference I'm on OSX Mountain Lion and the test file was compiled using these commandline options:\n\n['-I/Users/quarnster/Library/Application Support/Sublime Text 2/Packages/SublimeClang/clang/include', u'-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include/', u'-isysroot', u'/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/', u'-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks', u'-ICocoa', '-x', u'c++']\n"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8796793",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8796793",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8796793,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T09:30:26Z",
    "updated_at": "2012-09-23T09:47:39Z",
    "body": "> Do you get any other errors indicating that some header include path isn't setup properly?\n\nNope. The toolchain I'm using with the SublimeClang plugin is a bit unusual. [This is how I have configured it](http://aery32.readthedocs.org/en/latest/use_with_st2.html#autocompletion-with-sublimeclang).\n\nDid you tested with any input param? The plugin doesn't complain about `strlen()` but `strlen(\"hello\")` for example.\n\n---\n\nEdit: Hmm... seems like `extern \"C\" #include <string.h>` behaves similarly :fearful:\n\nHere's my `string.h`:\n\n\t/*\n\t * string.h\n\t *\n\t * Definitions for memory and string functions.\n\t */\n\n\t#ifndef _STRING_H_\n\t#define\t_STRING_H_\n\n\t#include \"_ansi.h\"\n\t#include <sys/reent.h>\n\n\t#define __need_size_t\n\t#include <stddef.h>\n\n\t#ifndef NULL\n\t#define NULL 0\n\t#endif\n\n\t_BEGIN_STD_C\n\n\t_PTR \t _EXFUN(memchr,(const _PTR, int, size_t));\n\tint \t _EXFUN(memcmp,(const _PTR, const _PTR, size_t));\n\t_PTR \t _EXFUN(memcpy,(_PTR, const _PTR, size_t));\n\t_PTR\t _EXFUN(memmove,(_PTR, const _PTR, size_t));\n\t_PTR\t _EXFUN(memset,(_PTR, int, size_t));\n\tchar \t*_EXFUN(strcat,(char *, const char *));\n\tchar \t*_EXFUN(strchr,(const char *, int));\n\tint\t _EXFUN(strcmp,(const char *, const char *));\n\tint\t _EXFUN(strcoll,(const char *, const char *));\n\tchar \t*_EXFUN(strcpy,(char *, const char *));\n\tsize_t\t _EXFUN(strcspn,(const char *, const char *));\n\tchar \t*_EXFUN(strerror,(int));\n\tsize_t\t _EXFUN(strlen,(const char *));\n\tchar \t*_EXFUN(strncat,(char *, const char *, size_t));\n\tint\t _EXFUN(strncmp,(const char *, const char *, size_t));\n\tchar \t*_EXFUN(strncpy,(char *, const char *, size_t));\n\tchar \t*_EXFUN(strpbrk,(const char *, const char *));\n\tchar \t*_EXFUN(strrchr,(const char *, int));\n\tsize_t\t _EXFUN(strspn,(const char *, const char *));\n\tchar \t*_EXFUN(strstr,(const char *, const char *));\n\n\t#ifndef _REENT_ONLY\n\tchar \t*_EXFUN(strtok,(char *, const char *));\n\t#endif\n\n\tsize_t\t _EXFUN(strxfrm,(char *, const char *, size_t));\n\n\t#ifndef __STRICT_ANSI__\n\tchar \t*_EXFUN(strtok_r,(char *, const char *, char **));\n\n\tint\t _EXFUN(bcmp,(const void *, const void *, size_t));\n\tvoid\t _EXFUN(bcopy,(const void *, void *, size_t));\n\tvoid\t _EXFUN(bzero,(void *, size_t));\n\tint\t _EXFUN(ffs,(int));\n\tchar \t*_EXFUN(index,(const char *, int));\n\t_PTR\t _EXFUN(memccpy,(_PTR, const _PTR, int, size_t));\n\t_PTR\t _EXFUN(mempcpy,(_PTR, const _PTR, size_t));\n\t#ifdef __CYGWIN__\n\textern void *memmem (__const void *, size_t,  __const void *, size_t);\n\t#endif\n\tchar \t*_EXFUN(rindex,(const char *, int));\n\tchar \t*_EXFUN(stpcpy,(char *, const char *));\n\tchar \t*_EXFUN(stpncpy,(char *, const char *, size_t));\n\tint\t _EXFUN(strcasecmp,(const char *, const char *));\n\tchar\t*_EXFUN(strcasestr,(const char *, const char *));\n\tchar \t*_EXFUN(strdup,(const char *));\n\tchar \t*_EXFUN(_strdup_r,(struct _reent *, const char *));\n\tchar \t*_EXFUN(strndup,(const char *, size_t));\n\tchar \t*_EXFUN(_strndup_r,(struct _reent *, const char *, size_t));\n\tchar \t*_EXFUN(strerror_r,(int, char *, size_t));\n\tsize_t\t _EXFUN(strlcat,(char *, const char *, size_t));\n\tsize_t\t _EXFUN(strlcpy,(char *, const char *, size_t));\n\tint\t _EXFUN(strncasecmp,(const char *, const char *, size_t));\n\tsize_t\t _EXFUN(strnlen,(const char *, size_t));\n\tchar \t*_EXFUN(strsep,(char **, const char *));\n\tchar\t*_EXFUN(strlwr,(char *));\n\tchar\t*_EXFUN(strupr,(char *));\n\t#ifdef __CYGWIN__\n\t#ifndef DEFS_H\t/* Kludge to work around problem compiling in gdb */\n\tconst char  *_EXFUN(strsignal, (int __signo));\n\t#endif\n\tint     _EXFUN(strtosigno, (const char *__name));\n\t#endif\n\n\t/* These function names are used on Windows and perhaps other systems.  */\n\t#ifndef strcmpi\n\t#define strcmpi strcasecmp\n\t#endif\n\t#ifndef stricmp\n\t#define stricmp strcasecmp\n\t#endif\n\t#ifndef strncmpi\n\t#define strncmpi strncasecmp\n\t#endif\n\t#ifndef strnicmp\n\t#define strnicmp strncasecmp\n\t#endif\n\n\t#endif /* ! __STRICT_ANSI__ */\n\n\t#include <sys/string.h>\n\n\t_END_STD_C\n\n\t#endif /* _STRING_H_ */\n"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8796916",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8796916",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8796916,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T09:48:36Z",
    "updated_at": "2012-09-23T09:48:36Z",
    "body": "Yeah, here's the full test I used:\n\n```c++\n#include <cstring>\n\nint main()\n{\n    strlen(\"\");\n    ::strlen(\"\");\n    std::strlen(\"\");\n    strlen2(\"\");\n    ::strlen2(\"\");\n    std::strlen2(\"\");\n}\n```\n\nThe strlen2's are just there to verify that I do get an error for those non-existing functions."
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8797238",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8797238",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8797238,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T10:41:06Z",
    "updated_at": "2012-09-23T10:41:06Z",
    "body": "Had a quick look at the avr toolchain myself and found that it works if I add this to the options:\n```json\n    \"-ccc-host-triple\", \"i386\",\n```\n\n\"arm\", \"mips\", \"sparc\" and \"powerpc\" also seems to do the trick. Not sure what the flag actually does though, but having a quick look at the cursors available with and without the host triple argument it seems that some GNUC defines are defined when the host triple is provided so likely it enables some gcc mode needed when using gcc headers."
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8797746",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8797746",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8797746,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T12:06:25Z",
    "updated_at": "2012-09-23T12:06:25Z",
    "body": "Thanks that indeed fixed the problem!"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8797971",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8797971",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8797971,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T12:37:26Z",
    "updated_at": "2012-09-23T12:42:36Z",
    "body": "As a side note, for those who end up here from the default settings file, I want to add that the SublimeClang plugin does not work with the gcc's build-in functions. So for example the use of `__builtin_mfsr/mtsr()` will raise the error. The workaround is to silence these errors by disabling the output panel: `\"sublimeclang_show_output_panel\": false`.\n\nIt would be awesome, if the plugin could fetch built-in functions from any compiler (and the define statements as well :heart_eyes:). For example, here are [the definitions for the avr32-g++](https://gist.github.com/3395106)."
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8798167",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8798167",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8798167,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T13:00:02Z",
    "updated_at": "2012-09-23T13:00:02Z",
    "body": "> It would be awesome, if the plugin could fetch built-in functions from any compiler (and the define statements as well :heart_eyes:).\n\nIt already can with the help of an [options script](https://github.com/quarnster/SublimeClang/blob/9b00045e5ff82867835120762bb3880ced124270/SublimeClang.sublime-settings#L273). For the built in compiler functions you'd have to figure out how to get it to spit out the definition though."
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8798600",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8798600",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8798600,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T13:47:47Z",
    "updated_at": "2012-09-23T15:23:21Z",
    "body": "Ok, seems like this does the trick for the #definitions\n\n    \"sublimeclang_options_script\": \"touch empty.cpp && avr32-g++ -mpart=uc3a1128 -E -dM empty.cpp && rm empty.cpp\"\n\nI'm looking for the solution for the built-ins and let you know if I manage to find one."
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8798715",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8798715",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8798715,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T14:00:53Z",
    "updated_at": "2012-09-23T14:03:16Z",
    "body": "Note that the expected script output is compiler flags rather than code. In this instance I'd probably create a script that creates a header with the definitions if it doesn't exist already (with no output from the script) and then add [\"-include\", \"${project_path:generated_header.h}\"] to the options.\n\nEDIT: You can probably also skip empty.cpp via\n\n```sh\necho \"\" | avr32-g++ -mpart=uc3a1128 -E -dM -c -\n```"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8798812",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8798812",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8798812,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T14:13:08Z",
    "updated_at": "2012-09-23T16:46:28Z",
    "body": "> In this instance I'd probably create a script that creates a header with the definitions if it doesn't exist already (with no output from the script) and then add [\"-include\", \"${project_path:generated_header.h}\"] to the options.\n\nI'll give this a try.\n\n> EDIT: You can probably also skip empty.cpp via\n> `echo \"\" | avr32-g++ -mpart=uc3a1128 -E -dM -c -`\n\nYeah actually I can do it like this...\n\nIn Windows: `avr32-g++ -mpart=uc3a1128 NUL -dM -E`\nIn Linux: `avr32-g++ -mpart=uc3a1128 /dev/null -dM -E`"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8799391",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8799391",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8799391,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T15:21:43Z",
    "updated_at": "2012-09-23T15:21:55Z",
    "body": "Ok, the above workaround gives the bunch of warnings:\n\n    Warning - '__XXX__' macro redefined"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/8799487",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/134#issuecomment-8799487",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/134",
    "id": 8799487,
    "user": {
      "login": "kblomqvist",
      "id": 206775,
      "avatar_url": "https://secure.gravatar.com/avatar/9a5a95217f9f0499ba809e47ca4333b4?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "9a5a95217f9f0499ba809e47ca4333b4",
      "url": "https://api.github.com/users/kblomqvist",
      "html_url": "https://github.com/kblomqvist",
      "followers_url": "https://api.github.com/users/kblomqvist/followers",
      "following_url": "https://api.github.com/users/kblomqvist/following",
      "gists_url": "https://api.github.com/users/kblomqvist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kblomqvist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kblomqvist/subscriptions",
      "organizations_url": "https://api.github.com/users/kblomqvist/orgs",
      "repos_url": "https://api.github.com/users/kblomqvist/repos",
      "events_url": "https://api.github.com/users/kblomqvist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kblomqvist/received_events",
      "type": "User"
    },
    "created_at": "2012-09-23T15:33:56Z",
    "updated_at": "2012-09-23T15:39:07Z",
    "body": "Here's my solution for the built-in functions. To get rid of the error, declare the built-ins via extern keyword, like this in my case\n\n    extern int __builtin_mfsr(int reg);\n    extern void __builtin_mtsr(int reg, int val);\n\nEDIT: The list of all AVR32 specific built-in functions can be found from [AVR32006's page 7](http://www.atmel.com/Images/doc32074.pdf)."
  }
]
