[
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/3591104",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/21#issuecomment-3591104",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/21",
    "id": 3591104,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-01-20T21:44:10Z",
    "updated_at": "2012-01-20T21:44:10Z",
    "body": "Could you be more specific?\r\n\r\n```c++\r\nclass A\r\n{\r\npublic:\r\n    int test;\r\n\r\n};\r\n\r\nclass B: public A\r\n{\r\npublic:\r\n    int test2;\r\n\r\n};\r\n\r\nclass C\r\n{\r\npublic:\r\n    B base;\r\n};\r\n\r\nint main(int argc, char ** argv)\r\n{\r\n    C c;\r\n    B &b2 = c.base;\r\n    B b;\r\n    int i = b.test;\r\n    int j = b.test2;\r\n}\r\n```\r\n\r\nPressing ctrl+d,ctrl+d on b.test, b.test2 and c.base works just fine.\r\n\r\nAlso what exactly would the implementation of a variable be? :)"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/3599500",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/21#issuecomment-3599500",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/21",
    "id": 3599500,
    "user": {
      "login": "alimbourg",
      "id": 893320,
      "avatar_url": "https://secure.gravatar.com/avatar/026209bccc701c900f9b99696ee9a154?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "026209bccc701c900f9b99696ee9a154",
      "url": "https://api.github.com/users/alimbourg",
      "html_url": "https://github.com/alimbourg",
      "followers_url": "https://api.github.com/users/alimbourg/followers",
      "following_url": "https://api.github.com/users/alimbourg/following",
      "gists_url": "https://api.github.com/users/alimbourg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alimbourg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alimbourg/subscriptions",
      "organizations_url": "https://api.github.com/users/alimbourg/orgs",
      "repos_url": "https://api.github.com/users/alimbourg/repos",
      "events_url": "https://api.github.com/users/alimbourg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alimbourg/received_events",
      "type": "User"
    },
    "created_at": "2012-01-21T22:32:44Z",
    "updated_at": "2012-01-21T22:35:11Z",
    "body": "In a perfect world my cursor located on the last `base` from `c.base` would climb up to `B base` from C definition, then to B definition then to A definition. \r\n\r\nClimbing from var declaration to type definition to type ancestor declaration...  \r\n    \r\n    class Scene\r\n    {          \r\n    }\r\n    void myFunction(Scene* pScene)\r\n    {\r\n             pScene->update();\r\n             pScene->setRootNode(pNode); //*error no function defined*\r\n    }\r\n\r\nIn this sample, starting from last pScene this allows to quickly go to Scene definition, to solve a bug in class declaration fe.\r\n\r\nActually i quickly achieved this by patching `sublimeclang.py` in `ClangGotoImplementation`  line 400 . Basically i'm looking for the underlying type_ref of a var/parm/field declaration:\r\n\r\n            if not d is None and cursor != d:\r\n                target = format_cursor(d)\r\n            elif not d is None and cursor == d and \\\r\n                (cursor.kind == cindex.CursorKind.VAR_DECL or \\\r\n                cursor.kind == cindex.CursorKind.PARM_DECL or \\\r\n                cursor.kind == cindex.CursorKind.FIELD_DECL):\r\n                for child in cursor.get_children():\r\n                    if child.kind == cindex.CursorKind.TYPE_REF:\r\n                        d = child.get_definition()\r\n                        if not d is None:\r\n                            target = format_cursor(d)\r\n                        break;                    \r\n            elif d is None:\r\n                ...\r\n\r\nI checked with visual assist this morning, and it's not as automatic: starting from a variable use->(alt+g)->variable declaration->moving cursor slightly on the variable type ->(alt+g)->type definition. \r\nSublime clang allows me to do this even more magically :)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/3599611",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/21#issuecomment-3599611",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/21",
    "id": 3599611,
    "user": {
      "login": "quarnster",
      "id": 1230389,
      "avatar_url": "https://secure.gravatar.com/avatar/10a89302c6736c988ce06d8a41c923c0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "10a89302c6736c988ce06d8a41c923c0",
      "url": "https://api.github.com/users/quarnster",
      "html_url": "https://github.com/quarnster",
      "followers_url": "https://api.github.com/users/quarnster/followers",
      "following_url": "https://api.github.com/users/quarnster/following",
      "gists_url": "https://api.github.com/users/quarnster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarnster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarnster/subscriptions",
      "organizations_url": "https://api.github.com/users/quarnster/orgs",
      "repos_url": "https://api.github.com/users/quarnster/repos",
      "events_url": "https://api.github.com/users/quarnster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarnster/received_events",
      "type": "User"
    },
    "created_at": "2012-01-21T22:51:20Z",
    "updated_at": "2012-01-21T22:51:20Z",
    "body": "Gotcha, good suggestion. I added in your code in both GotoImplementation and GotoDefinition. Is there anything else you'd like to add or can this issue be close?"
  },
  {
    "url": "https://api.github.com/repos/quarnster/SublimeClang/issues/comments/3599838",
    "html_url": "https://github.com/quarnster/SublimeClang/issues/21#issuecomment-3599838",
    "issue_url": "https://api.github.com/repos/quarnster/SublimeClang/issues/21",
    "id": 3599838,
    "user": {
      "login": "alimbourg",
      "id": 893320,
      "avatar_url": "https://secure.gravatar.com/avatar/026209bccc701c900f9b99696ee9a154?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "026209bccc701c900f9b99696ee9a154",
      "url": "https://api.github.com/users/alimbourg",
      "html_url": "https://github.com/alimbourg",
      "followers_url": "https://api.github.com/users/alimbourg/followers",
      "following_url": "https://api.github.com/users/alimbourg/following",
      "gists_url": "https://api.github.com/users/alimbourg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alimbourg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alimbourg/subscriptions",
      "organizations_url": "https://api.github.com/users/alimbourg/orgs",
      "repos_url": "https://api.github.com/users/alimbourg/repos",
      "events_url": "https://api.github.com/users/alimbourg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alimbourg/received_events",
      "type": "User"
    },
    "created_at": "2012-01-21T23:25:30Z",
    "updated_at": "2012-01-21T23:25:30Z",
    "body": "Excellent ! Exactly what i had in mind !"
  }
]
